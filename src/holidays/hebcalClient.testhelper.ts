import { JcItem, JcResponse } from "./hebcalClient";

let cntMockResponses = 0;
export const createMockResponse = (items?: JcItem[]): JcResponse => {
    const ixMock = ++cntMockResponses;
    const generatedDate = new Date();

    if(!items || items.length === 0) items = [createMockJcItem({ category: 'hebdate' })];
    for(let i = 0; i < items.length; i++) {
        if(items[i].category == 'holiday') {
            if(!items.some(x => x.category == 'hebdate' && x.date === items[i].date)) {
                items.unshift(createMockJcItem({ category: 'hebdate', date: new Date(items[i].date) }));
                i++;
            }
        }
    }

    return {
        title: `Mock JcResponse - autogenerated ${ixMock}`,
        date: generatedDate.toISOString(),
        range: { start: new Date(generatedDate.getFullYear(), 0, 1).toISOString(), end: new Date(generatedDate.getFullYear(), 11, 31).toISOString() },
        items: items ?? [createMockJcItem({ category: 'hebdate' })]
    };
};

let cntMockJcItems = 0;
export const createMockJcItem = ({ category = 'hebdate', date, hdate, title }: { category: JcItem['category'], date?: Date, hdate?: string, title?: string }): JcItem => {
    const ixMock = ++cntMockJcItems;
    if (!date) date = new Date(2025, 3, 23);

    return {
        category,
        title: title ?? `Mock JcItem ${ixMock}`,
        hebrew: `פריט JC מזויף ${ixMock}`,
        date: date.toISOString().split('T')[0],
        hdate: hdate ?? `תאריך עברי מזויף ${ixMock}`,
        memo: `Mock memo text for item ${ixMock}`,
        link: `https://www.hebcal.com/mock-link/${ixMock}`
    }
};
